version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.10-slim-buster
  aws:
    docker:
      - image: amazon/aws-cli

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: << parameters.when >>
          command: |
            aws s3 rm "s3://udapeople-<< parameters.id >>" --recursive
            aws cloudformation delete-stack  \
              --stack-name "udapeople-backend-<< parameters.id >>"
            aws cloudformation delete-stack  \
              --stack-name "udapeople-frontend-<< parameters.id >>"

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when >>
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure "https://kvdb.io/LuUYJe6EqD3AtxHk4GRz28/migration_<< parameters.id >>":-0)
            if [[ "$SUCCESS" == "1" ]]
            then
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm install
            npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
            - frontend/dist

  build-backend:
    executor: node
    steps:
      - checkout
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test front-end
          working_directory: ./frontend
          command: |
            npm run test
  
  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test back-end
          working_directory: ./backend
          command: |
            npm run test
  
  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Audit front-end
          working_directory: ./frontend
          command: |
            npm audit --audit-level=critical
  
  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Audit back-end
          working_directory: ./backend
          command: |
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["59:be:de:47:40:30:73:2c:51:04:33:9a:dc:4a:86:d5"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update && apt install -y tar gzip unzip curl rsync openssh-client
            python3 -m pip install --upgrade ansible
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  run-migrations:
    executor: node
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              curl --insecure https://kvdb.io/LuUYJe6EqD3AtxHk4GRz28/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  deploy-frontend:
    executor: node
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n '2p' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm run build:prod
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["59:be:de:47:40:30:73:2c:51:04:33:9a:dc:4a:86:d5"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update && apt install -y tar gzip unzip curl rsync openssh-client
            python3 -m pip install --upgrade ansible
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  smoke-test:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update && apt install -y unzip curl
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: .
      - run:
          name: Backend smoke test.
          command: |
            sed -n '2p' .circleci/ansible/inventory.txt
            BACKEND_URL="http://$(sed -n '2p' .circleci/ansible/inventory.txt):3030"
            echo "${BACKEND_URL}"
            if curl "${BACKEND_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"
            echo "${FRONTEND_URL}"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
                exit 1
            else
                exit 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-cloudfront-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]